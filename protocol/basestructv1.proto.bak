syntax = "proto3";
package protocol;
option java_package="com.social.protocol.basesocial";
option optimize_for=SPEED;
option objc_class_prefix="BST";

//基本结构
enum OPType{
	OP_NONE = 0;
	OP_GET = 1; 
	OP_SET = 2; 
	OP_DEL = 3; 
	OP_ADD = 4; 
	OP_DEC = 5;
}

enum IPStatus{
	IP_DEAD  = 0;
	IP_BLACK = 1;
	IP_WHITE = 2; //将IP从黑名单中移除
}

message IPItem
{
	string ip = 1;
	uint32 port = 2;
	string ipv6 = 3;
	bytes  modulename = 4;//服务器名字
	uint32 status = 5; //IPStatus
	uint32 stamp = 6;//最近更新时间
}

message RouteItem
{
	IPItem ipitem = 1; // 当前ip
	uint32 begingrid = 2; //起始格子, 总为10000, 取值为[0-10000]
	uint32 endgrid = 3; //结束格子, [begingrid, endgrid) 半闭半开区间
	uint32 consistent = 4; //是否强一致性路由 = 1表示强一致性路由， =0 随机路由
	uint32 istransfer = 5; //是否在迁移 = 0 没有迁移，newipitem无效 =1 在迁移，档期不可写
	IPItem newipitem = 6; //新ip
}

enum MASKBIT{
	BIT0 = 0;
	BIT1 = 1;
	BIT2 = 2;
	//...
	BIT63 = 63;
}

//支持某个特性的单独修改
message InfoItem
{
	uint32 fieldtype = 1;
	bytes  fieldvalue = 2; 
	uint32 op = 3;  //操作 ADD,SET,DEC,DEL
	uint64 stamp = 4; //时间秒数
}

//全量数据，存储的数据
message UserInfo
{
	uint64  uin = 1;
	bytes   name = 2;
	bytes   headurl = 3; 
	repeated InfoItem itemlist = 4; //允许有重复的字段, 所有的字符串值必须要有标准值，字符串需要映射为数字
	uint64  mask = 5;  //MASKBIT 定位BIT0, BIT63表示第64位 使用1<<BITN位取与运算
	Pos     pos = 6; 
	uint64  microstamp = 7; //最后修改的时间
}

message SimpleUserInfo
{
	uint64  uin = 1;
	bytes   name = 2;
	bytes   headurl = 3; 
	uint64  mask = 4;  //MASKBIT 定位BIT0, BIT63表示第64位 使用1<<BITN位取与运算
	map<int32, bytes> itemlist = 5;  //不允许有重复的字段，如果重复的字段，请单独处理里面的可以定义一个结构进行编解码
}

//the same struct with ListItem
message MeItem
{
	bytes title = 1;
	bytes iconurl = 2; //=空表示使用本地默认的icon
	bytes listtype = 3; //ListType 列表的类型
	JumpItem jumpitem = 4; //跳转的类型
	uint32 isnew = 5; //是否新加
	uint32 idx = 6; //在列表中的顺序排序
	bytes  desc = 7; //描述推广信息说明
	uint64 lastmicrostamp = 8;//
}

message ThumbPicItem
{
	bytes picurl = 1; // url //实现上次url为空，缩略图采用原图url+宽度组成
	uint32 width = 2; 
	uint32 height = 3;
}

message PicItem
{
	bytes picurl = 1; // url
	uint32 width = 2; 
	uint32 height = 3;
	ThumbPicItem thumbpiclist = 4; //缩略图尺寸
}

enum PosFlag{
	POS_ALLOWD = 0; //正常获取地址，默认值
	POS_NOT_ALLOWED = 1; //用户未授权
	POS_GET_TIMEOUT = 2; //获取地理位置超时
}

message Pos
{
	string name = 1; //地理位置全名
	sint32 posx = 2; ////纬度 * 1000000; 取值范围[-90.0 * 1000000, 90.0 * 1000000]
	sint32 posy = 3; ////经度 * 1000000; 取值范围[-180.0 * 1000000, 180.0 * 1000000]
	string country = 4; //国家
	string locality = 5;//城市
	string sublocality = 6;// 区
	string street = 7; //街道
	string doorcode = 8; //门牌号
	uint32 posflag = 9; //地理位置信息选项 见PosFlag定义
	string state = 10 ;//洲
	string placeid = 11;
}

message UrlItem
{
	uint32 openmethod = 1; //0 表示应用内打开, 1 表示浏览器打开
	bytes  url = 2; //跳转的url
}

enum JumpNum
{
	JUMP_NONE = 0;
	JUMP_HOME = 1; 
	JUMP_CHAT = 2; 
	JUMP_RANK = 3; 
	JUMP_PRO = 4;
	JUMP_SETTING = 5;
	JUMP_REVIEW = 6;
	JUMP_FEEDBACK = 7;
	JUMP_INVESTGATE = 8; //
}

message JumpItem
{
	int32  jumptarget = 1; // JumpNum
	UrlItem urlitem = 2; //如果jumptarget == 4; //这里是说明跳转的url地址
	string shareurl = 3;  
	bytes  jumptitle = 4; //表述jump的目的地
}

message DaterItem
{
	UserInfo userinfo = 1;
}

enum FriType
{
	FRI_NONE = 0;
	FRI_LIEK = 1;
	FRI_UNLIKE = 2; 
	FRI_DOUBLE = 3;
	FRI_BLACK = 4; 
	FRI_UNMATCH = 5; 
}

message FriItem
{
	uint64 uin = 1;
	uint64 friuin = 2; 
	uint32 fritype = 3; //关系
	uint32 optype = 4; //是否删除
	uint32 frisource = 5; //关系来源
	uint64 firstmicrostamp = 6; //第一次关系建立的时间
	uint64 lastmicrostamp = 7; //最近的时间
	uint64 frimask = 8 ;//权限
}

enum GiftType
{
	GIFT_NONE = 0;
	GIFT_FLOWER = 1; 
	GIFT_VIRTUAL_GOODS = 2; 
	GIFT_COINS = 3;//
}

message GiftItem
{
	uint32 type = 1;  //GiftType
	bytes  id = 2;
	uint32 num = 3; //礼物数量
	bytes  url = 4; //gift图片url
	bytes  flashurl = 5; //动画图片
	bytes  desc = 6; //礼物描述
	uint32 source = 7; //从哪里送的礼物
	bytes  goodid = 8; //gift代表的goodid
	SimpleUserInfo senderinfo = 9; 
	SimpleUserInfo recverinfo = 10; 
	uint64 sendmicrostamp = 11;
	bytes  sharedurl = 12;
}

message GiftStatItem
{
	uint32 type = 1; //GiftType
	uint32 count = 2; //礼物数量
	bytes url = 3;
	bytes flashurl = 4;
	bytes desc = 5;  // 礼物描述
	bytes sharewording = 6;  //分享时显示的wording 
}

message GiftList
{
	map<uint64, GiftItem> giftitemlist = 1; //按照时间顺序的giftitem, key是礼物的时间
	map<uint32, GiftStatItem> giftstatitemlist = 2; //Gift统计数据, key是gifttype
	uint64 lastmicrostamp = 3;
	uint32 totalcount = 4; //总的价值数量
}

enum ChatType
{
	CHAT_NONE = 0; //
	CHAT_DOUBLE = 1; //永久会话
	CHAT_GROUP = 2; //永久会话
	CHAT_TMP = 3; //临时会话
	CHAT_2C = 4; //只能收信息的会话
}

message MemberItem
{
	SimpleUserInfo simpleinfo  = 1; //
	uint64 mmask = 2; //成员权限
}

message ChatArchItem
{
	bytes chatid = 1;
	uint64 camsgnum = 2; 
	uint64 createmicorstamp = 3;
	uint64 lastmicrostamp = 4; //
}

message ChatListItem
{
	bytes chatid = 1; //标识会话的id
	uint32 chattype = 2; //ChatType
	uint64 creator = 3; // 创建者
	uint64 admin = 4; // 管理员
	map<uint64, MemberItem> memberlist = 5; //成员列表, 权限列表
	uint64 createmicrostamp  = 6; //创建的时间
	uint64 lastmicrostamp  = 7; //创建的时间
	uint64 cmsgnum = 8; //会话的消息数
	uint64 cmask = 9 ;//会话mask，跟usrinfo定义mask不一样
	map<uint64, ChatArchItem> chatarchitemlist = 10; //arch num 从0开始
}

enum MsgType
{
	MSG_NONE = 0;//
	MSG_TEXT = 1; // MsgBody 为 MsgText
	MSG_PIC = 2; //MsgBody 为MsgPic
	MSG_STREAM = 3; //MsgBody 为MsgStream
	MSG_CONF = 4; //MsgBody为MsgConf
	MSG_NOTICE = 5; //MsgBody MsgText
	MSG_GIFT = 6; //MsgBody MsgGift
	MSG_NOTICATION = 7; //MsgBody MsgText
}

message ChatHead
{
	bytes msgid = 1; //消息id
	SimpleUserInfo senderinfo = 2; //发送者uin
	uint32 msgtype = 3;  //MsgType
	uint64 sendmicrostamp = 4; //发送的时间
	uint64 chatseq = 5; //消息的序号
	uint32 confmsgtype = 6;//配置的消息类型
	uint32 optype = 7; //OP_DEL, OP_SET, 下发给客户端，如果为OP_DEL, 客户端要删掉本地数据
	uint32 isneedpush = 8; // =0 不push， =1 需要push
	uint32 isreaded = 9; //已读 0 未读， 1 已读
	uint64 lifetime = 10; //生存时间 默认情况下生存时间为0， 表示一直生存, 否则就表示当前的消息生存的时长
	uint32 isencrypt = 11; //加密
	bytes  pushid = 12; //发送notification的pushid
	uint64 chatmask = 13; //消息mask
}

message ChatItem
{
	ChatHead chathead = 1;
	bytes chatcontent = 2; //消息进行加密, 根据msgtype使用对应的结构进行编解码
}

message MsgText
{
	bytes   text = 1; 
	PicItem picitem = 2;//
	bytes   title = 3; //
	JumpItem jumptarget = 4; //
}

message MsgPic
{
	PicItem picitem = 3; //
}


message MsgGift
{
	GiftItem giftitem = 1; //
	bytes  goodsid = 2; //
}

enum StreamType
{
	STREAM_NONE = 0;
	STREAM_PIC = 1; //图片
	STREAM_FILE = 2; //文件
	STREAM_VOICE = 3;//语音
	STREAM_MUSIC = 4;//音乐
	STREAM_VEDIO = 5;//视频
}

message MsgStream
{
	bytes  streamid = 1; //stream id
	uint32 totalseg = 2; //总的流的片数
	uint32 curseq = 3;   //当前流序号，从0开始
	bytes  stream = 4;   //留数据
	uint32 streamtype = 5; //
}

enum ListType
{
	LIST_NONE = 0;
	LIST_LIKED = 1;
	LIST_WEALTHY = 2; 
	LIST_PROMO = 3; 
	LIST_VEDIOSHOW = 4;
}

message ListItem
{
	bytes title = 1;
	bytes iconurl = 2; //=空表示使用本地默认的icon
	bytes listtype = 3; //ListType 列表的类型
	JumpItem jumpitem = 4; //跳转的类型
	uint32 isnew = 5; //是否新加
	uint32 idx = 6; //在列表中的顺序排序
	bytes  desc = 7; //描述推广信息说明
	uint64 lastmicrostamp = 8;//
}

message ListDetailItem
{
	SimpleUserInfo userinfo = 1;
	uint32 idx = 2; //排序字段
}

//=========================================

enum ReportType
{
	RT_NONE = 0;
	RT_CLICKEVENT = 1; //ClickEvent
	RT_ERROR = 2; //ErrorEvent
}

message ClickEvent
{
	uint32 pageid = 1; //页面ID
	uint32 eventid = 2; //事件id
	uint32 stamp = 3; //时间发生时间
	uint64 uid = 4; //发生的uin
	bytes  value = 5; //其他自定义字段
}

message ErrorEvent
{
	int32 errcode = 1; //错误码
	int32 sourceid = 2; //发生错误的代码，可以是cmd，或者定义好的eventid
	bytes source = 3; //错误发生的地方 操作 或者操作
	bytes resultdesc = 4; //错误导致的结果描述
	uint64 micorstamp = 5; //发生的时间，微秒
	
}

message ReportItem
{
	int32 reporttype = 1; //ReportType
	bytes content = 2; // 上报的具体内容
}

enum CAType
{
	CA_NONE = 0;
}


message StartParam
{
	Pos pos = 1; //上报地理位置
	uint64 laststartmicrostamp = 2; //上一次启动时间
	uint64 lastendmicorstamp = 3; //上一次退到后台时间 统计在线时长?
	uint64 startsource = 4; //启动来源
	bytes  recvidentify = 5; //启动收到的特殊标识符
	uint32 crashnum = 6; //crash次数
	uint32 dnslatency = 7 ;// DNS 耗时 micro, 微妙数
	uint32 connectlatency = 8; //联网耗时
	uint32 firstpkglatency = 9; //收到第一个回包的延时
	uint32 enterhomelatency = 10; //app启动到进入主界面的时间
	uint32 capacity = 11; //占有容量大小
	uint32 picnum = 12; //本地图片数量
	uint32 avgdownpictime = 13; //图片平均瞎子延时 ms为单位
	uint32 freezetime = 14; //卡顿情况
	uint32 coredataisempty = 15; //核心数据是否为空判断
	uint32 fatalerror = 16; //致命错误
}
//




//
